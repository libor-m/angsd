---------------
parseArgs_bambi.cpp: bam reader:
	-bam		(null)	Supply a file list of BAMfiles
	-i		(null)	Supply a single BAMfile
	-r		(null)	Supply a single region in commandline (see examples below)
	-rf		(null)	Supply multiple regions in a file (see examples below)
	-remove_bads	1	Discard 'bad' reads, (flag >=255) 
	-nInd		0	Only use first nInd from the filelist from the -bam argument
	-nLines		50	Read nLines from files at a time
	-uniqueOnly	0	Discards reads that doesn't map uniquely
	-show		0	Mimic 'samtools mpileup' also supply -ref fasta for printing reference column
	-minMapQ	0	Discard reads with mapping quality below
	-only_proper_pairs	1	Only use reads where the mate could be mapped
	-C		0	adjust mapQ for excessive mismatches (as SAMtools), supply -ref
	-baq		0	adjust qscores around indels (as SAMtools), supply -ref

Examples for region specification:
		chr:		Use entire chromosome: chr
		chr:start-	Use region from start to end of chr
		chr:-stop	Use region from beginning of chromosome: chr to stop
		chr:start-stop	Use region from start to stop from chromosome: chr
		chr:site	Use single site on chromosome: chr
/home/software/angsd/angsd0.540/angsd -doAsso 2 -bam ../test/list -out delme -doMaf 2 -doMajorMinor 1 -GL 1 


	-> angsd version: 0.540	 build(Jun 28 2013 15:34:55)
	->Fri Jun 28 16:36:42 2013
--------------------
[shared.cpp:init()]
	-nThreads	1	Number of threads to use
	-nQueueSize	-1	Maximum number of queud elements
	-howOften	100	How often should the program show progress
--------------
analysisKeepList.cpp:
	-filter		(null) dofilter=0
	-doMajorMinor	1	
	1: Infer major and minor from GL
	2: Infer major and minor from allele counts
	3: use major and minor from bim file (requires -filter afile.bim)
	4: Use reference allele as major (requires -ref)
	5: Use ancestral allele as major (requires -anc)
	-minInd		-1	Only use site if atleast minInd of samples has data

---------------
getFasta.cpp:

	-ref	(null)	(afile.fasta)
	-anc	(null)	(afile.fasta)
	NB these fasta files should be indexed 'samtools faidx'

---------------
analysisCount.cpp:
	-doCounts	0	(Count the number A,C,G,T. All sites, All samples)
	-minQ		13	(remove bases with qscore<minQ)
	-setMaxDepth	-1	(-1 indicates no filtering)
	-trim		0	(trim ends of reads)
	-minDepth	-1	(bin together high depths)
	-minInd		-1	(0 indicates no filtering)

Filedumping:
	-doDepth	0	(dump distribution of seqdepth)	.depthSample,.depthGlobal
	  -maxDepth	100	(bin together high depths)
	-doQsDist	0	(dump distribution of qscores)	.qs
	-dumpCounts	0
	  1: total seqdepth for site	.pos
	  2: seqdepth persample		.pos,.counts
	  3: A,C,G,T overall all samples	.pos,.counts
	  4: A,C,G,T for all samples	.pos,.counts


---------------------
analysisEstError.cpp:

	-doError	0
	-minSites	10000
	-emIter		100
	-errors		(null)	(filename for starterrors)
	-minPhat		0.005000	(minimum phat)
	-eps		0.001000	(an estimate of errorrate)
	NB this method requires -doMajorMinor 2

---------------------
analysisEstLikes.cpp:
	-GL=1: 
	1: SAMtools
	2: GATK
	3: SOAPsnp
	4: SYK
	-minQ		13		(remove bases with qscore<minQ)
	-trim		0		(zero means no trimming)
	-tmpdir		angsd_tmpdir/	(used by SOAPsnp)
	-errors		(null)		(used by SYK)
	-minInd		-1		(-1 indicates no filtering)

Filedumping:
	-doGlf	0
	1: binary glf (10 log likes)	.glf
	2: beagle likelihood file	.beagle.gz
	3: binary 3 times likelihood	.glf
	4: text version (10 log likes)	.glf

---------------------
analysisEstLikes.cpp:
	-GL=1: 
	1: SAMtools
	2: GATK
	3: SOAPsnp
	4: SYK
	-minQ		13		(remove bases with qscore<minQ)
	-trim		0		(zero means no trimming)
	-tmpdir		angsd_tmpdir/	(used by SOAPsnp)
	-errors		(null)		(used by SYK)
	-minInd		-1		(-1 indicates no filtering)

Filedumping:
	-doGlf	0
	1: binary glf (10 log likes)	.glf
	2: beagle likelihood file	.beagle.gz
	3: binary 3 times likelihood	.glf
	4: text version (10 log likes)	.glf

-------------------
analysisMajorMinor.cpp:

	-doMajorMinor	1
	1: Infer major and minor from GL
	2: Infer major and minor from allele counts
	3: use major and minor from bim file (requires -filter afile.bim)
	4: Use reference allele as major (requires -ref)
	5: Use ancestral allele as major (requires -anc)

------------------------
analysisMaf.cpp:
-doMaf	2
	1: BFGS frequency (known major minor)
	2: EM frequency (known major minor)
	4: BFGS frequency (unknown major minor)
	8: EM frequency (unknown major minor)
	16: frequency from genotype probabilities
	32: alleleCounts based method (known major minor)
	-doSNP	0
	-minMaf	0.010000 0
	-minLRT	24.000000 0
	-ref	(null)
	-anc	(null)
	-doZ	0
	-eps	0.001000 [Only used for -doMaf &32]
NB these frequency estimators requires major/minor -doMajorMinor

